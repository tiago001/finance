<div class="input-group mb-2">
    <span class="input-group-text" id="basic-addon1">Valor</span>
    <input type="text" inputmode="decimal" class="form-control money_value currency" aria-label="valor" aria-describedby="basic-addon1" placeholder="0.00">
</div>

<div class="input-group mb-2">
    <span class="input-group-text" id="basic-addon1">Data</span>
    <input type="date" class="form-control date" data-provide="datepicker">
</div>

<div class="input-group mb-2">
    <span class="input-group-text" id="basic-addon1">Categoria</span>
    <select class="form-select category" aria-label="Default select example">
        <option value="Indefinido" selected>Selecione a categoria</option>
        {% for category in categories %}
        <option value="{{category.id}}">{{category.category}}</option>
        {% endfor %}
    </select>
</div>

<div class="input-group mb-2">
    <span class="input-group-text" id="basic-addon1">Observação</span>
    <input type="text" class="form-control obs" aria-label="obs" aria-describedby="basic-addon1">
</div>
  
<button type="button" class="btn btn-primary w-100" onclick="save_income()">Salvar Receita</button>

<div class="row pt-2" style="max-height: 280px;">
    <canvas id="graph"></canvas>
</div>

<div class="pt-4 incomes-year text-sm-end text-center">
    
</div>

<div class="row pt-4 incomes">

</div>

<style>
    .show-value:hover {
        background: #ecf0fa;
    }

    .show-value:hover .value {
        display: none;
    }

    .show-value:hover .full-value {
        display: block;
    }

    .value {
        display: block;
    }

    .full-value {
        display: none;
    }

</style>

<script>
    setTimeout(function() {
        $('.currency').mask("#0.00", {reverse: true});
    }, 50);

    date = new Date();
    document.getElementsByClassName("date")[0].valueAsDate = new Date(date.getFullYear(), date.getMonth(), date.getDate())
    
    function search_incomes(){
        fetch("search_income", {redirect: 'follow'})
        .then((response) => {
            if (response.redirected) window.location.href = response.url;
            return response.json()
        })
        .then((json) => {
            fill_incomes(json)
            organize_incomes(json)
        })
        .catch((error) => {
            console.warn(error);
        });
    }

    months = {
        1 : "Janeiro",
        2 : "Fevereiro",
        3 : "Março",
        4 : "Abril",
        5 : "Maio",
        6 : "Junho",
        7 : "Julho",
        8 : "Agosto",
        9 : "Setembro",
        10 : "Outubro",
        11 : "Novembro",
        12 : "Dezembro"
    }

    function calculatePercentageDifferences(data) {
        const differences = [];
        for (let i = 0; i < data.length - 1; i++) {
            const val1 = data[i];
            const val2 = data[i + 1];
            if (val1 === 0) {
                differences.push(val2 > 0 ? '∞%' : '0%');
            } else {
                const diff = ((val2 - val1) / val1) * 100;
                differences.push(`${diff.toFixed(1)}%`);
            }
        }
        return differences;
    }

    function calculatePercentageDifferencesLine(data) {
        const differences = [];
        for (let i = 0; i < data.length - 1; i++) {
            const val1 = data[i];
            const val2 = data[i + 1];
            if (val1 === 0) {
                differences.push(0);
            } else {
                const diff = ((val2 - val1) / val1) * 100;
                differences.push(parseFloat(diff.toFixed(1)));
            }
        }
        return differences;
    }


    let legend = {
        ["percentage"] : true
    }

    function checkGraphLegend(){
        legend["percentage"] = graph.legend.legendItems.filter(legend => legend.text == "%")[0].hidden
    }

    percentageDifferencePlugin = {
        id: 'percentageDifferencePlugin',
        afterDatasetsDraw(chart, args, options) {
            const { ctx, chartArea: { top, height }, scales: { x, y } } = chart;
            ctx.save();
            ctx.font = 'bold 12px Inter';
            ctx.textAlign = 'center';
            ctx.textBaseline = 'middle';

            const dataset = chart.data.datasets[1];
            const meta = chart.getDatasetMeta(1);

            meta.data.forEach((bar, index) => {
                if (index < meta.data.length - 1) {
                    const nextBar = meta.data[index + 1];

                    const x1 = bar.x;
                    const x2 = nextBar.x;
                    const y1 = bar.y;
                    const y2 = nextBar.y;

                    const minY = Math.min(y1, y2);
                    const maxY = Math.max(y1, y2);

                    const midX = (x1 + x2) / 2;
                    const diffText = percentageDifferences[index];
                    const textY = (minY + maxY) / 2;

                    let textFillColor = 'rgb(75, 192, 192)';
                    let errorBarStrokeColor = 'rgba(170, 230, 230, 0.8)';

                    if (diffText.includes('-')) {
                        textFillColor = 'rgb(255, 99, 132)';
                        errorBarStrokeColor = 'rgba(255, 190, 200, 0.8)';
                    } else if (diffText !== '0%' && diffText !== '∞%') {
                        textFillColor = 'rgb(54, 162, 235)';
                        errorBarStrokeColor = 'rgba(150, 210, 255, 0.8)';
                    }

                    ctx.strokeStyle = errorBarStrokeColor;
                    ctx.lineWidth = 1.5;
                    ctx.beginPath();
                    ctx.moveTo(midX, minY);
                    ctx.lineTo(midX, maxY);
                    ctx.stroke();

                    ctx.beginPath();
                    ctx.moveTo(midX - 5, minY);
                    ctx.lineTo(midX + 5, minY);
                    ctx.stroke();

                    ctx.beginPath();
                    ctx.moveTo(midX - 5, maxY);
                    ctx.lineTo(midX + 5, maxY);
                    ctx.stroke();

                    if(!legend["percentage"]){
                        const textMetrics = ctx.measureText(diffText);
                        const textWidth = textMetrics.width;
                        const textHeight = 5;
    
                        const padding = 5;
                        const rectX = midX - (textWidth / 2) - padding;
                        const rectY = textY - (textHeight / 2) - padding;
                        const rectWidth = textWidth + (padding * 2);
                        const rectHeight = textHeight + (padding * 2);
    
                        ctx.fillStyle = 'rgba(226, 226, 226, 0.95)';
                        ctx.fillRect(rectX, rectY, rectWidth, rectHeight);
                    }

                    ctx.fillStyle = textFillColor;
                    ctx.fillText(diffText, midX, (minY + maxY) / 2);
                }
            });
            ctx.restore();
        }
    };

    function organize_incomes(json){
        let data = []
        json.forEach(e => {
            year = "y"+new Date(e.date).getFullYear().toString()
            if(data[year] == null){
                data[year] = []
            }

            month = (new Date(e.date+"T00:00").getMonth()+1)

            if(data[year][month] == null){
                data[year][month] = []
            }
            
            data[year][month].push(e)
        })

        document.getElementsByClassName("incomes-year")[0].innerHTML = ""
        document.getElementsByClassName("incomes-year")[0].insertAdjacentHTML("beforeend",
                `<div class="row">
                    <div class="col-1 d-none d-sm-flex"></div>
                    <div class="col-10 d-none d-sm-flex row months px-0">
                    </div><div class="col-1 d-none d-sm-block">Total</div>
                </div>`
            );

        dataGraph = []
        labelGraph = []

        for (var key in data) {
            total = 0;
            document.getElementsByClassName("incomes-year")[0].insertAdjacentHTML("beforeend",
                `<div class="row show-value">
                    <div class="col-6 col-sm-1 text-center value" style="border-bottom: 2px solid #e1e1e1;">${key.substring(3,key.length)}</div>
                    <div class="col-6 col-sm-1 text-center full-value" style="border-bottom: 2px solid #e1e1e1;">${key.substring(1,key.length)}</div>
                    <div class="col-6 col-sm-1 income-${key} d-block d-sm-none" style="border-bottom: 2px solid #e1e1e1;"></div>
                    <div class="row col-12 col-sm-10 ${key} px-0 flex-sm-wrap flex-wrap-reverse" style="border-bottom: 2px solid #e1e1e1;"></div>
                    <div class="col-2 col-sm-1 income-${key} d-none d-sm-block" style="border-bottom: 2px solid #e1e1e1;"></div>
                </div>`
            );

            for (let i = 1; i <= 12; i++) {
                sum = 0
                if(data[key][i] != null){
                    sum = data[key][i].reduce(function (acc, obj) { return acc + obj.value; }, 0)
                }
                
                document.getElementsByClassName(key)[0].insertAdjacentHTML("beforeend",
                `
                <div class="col-6 d-block d-sm-none">${months[i]}</div>
                <div class="col-6 col-sm-1 value">${sum == 0 ? "-" : sum > 1000 ? toFixed(sum/1000,2)+"K" : sum}</div>
                <div class="col-6 col-sm-1 full-value">${sum == 0 ? "-" : sum.toFixed(2)}</div>`
                );
                total = total + sum
            }
            
            dataGraph.push(total)
            labelGraph.push(key.substring(1,key.length))

            if(total == 0){
                for (var i = 0; i < document.getElementsByClassName("income-"+key).length; i++) {
                    document.getElementsByClassName("income-"+key)[i].innerHTML = "-"
                }
            } else {
                for (var i = 0; i < document.getElementsByClassName("income-"+key).length; i++) {
                    document.getElementsByClassName("income-"+key)[i].innerHTML = 
                    `<span class="value">${total > 1000 ? toFixed(total/1000,2)+"K" : total}</span>
                    <span class="full-value">${total - parseInt(total) > 0 ? total.toFixed(2) : total}</span>`
                }
            }
        }

        for (let i = 1; i <= 12; i++) {
            document.getElementsByClassName("months")[0].insertAdjacentHTML("beforeend",
                `<div class="col-1">${months[i].substring(0,3)}</div>`
            );
        }

        dataGraph.reverse()
        labelGraph.reverse()

        show_graph(labelGraph, dataGraph)
    }

    percentageDifferences = [];

    function show_graph(label, data){
        if(graph){
            graph.destroy()
        }

        percentageDifferences = calculatePercentageDifferences(data);
        percentageDifferencesLine = calculatePercentageDifferencesLine(data);

        percentageDifferencesLine.unshift(0)

        let ctx = document.getElementById('graph');

        graph = new Chart(ctx, {
            options: {
                maintainAspectRatio: false
            },
            type: 'bar',
            data: {
                labels: label,
                datasets: [{
                    type: 'line',
                    label: '%',
                    data: percentageDifferencesLine,
                    yAxisID: 'myScale',
                    borderColor: function(context) {
                        var index = context.dataIndex;
                        var value = context.dataset.data[index];
                        if(index == 0) return 'rgba(255, 255, 255, 0)'
                        return value < 0 ? 'rgb(255, 99, 132)' : 'rgba(33, 70, 192, 1)'
                    },
                    backgroundColor: function(context) {
                        var index = context.dataIndex;
                        var value = context.dataset.data[index];
                        if(index == 0) return 'rgba(255, 255, 255, 0)'
                        return value < 0 ? 'rgb(255, 99, 132)' : 'rgba(33, 70, 192, 1)';
                    },
                    segment: {
                        borderColor: (context) => {
                            return context.p1.parsed.y >= 0 ? 'rgba(138, 159, 210, 1)' : 'rgba(255, 190, 200, 0.8)';
                        }
                    },
                    hidden: legend["percentage"]
                },{
                    label: 'Receita Anual',
                    data: data,
                    borderWidth: 1,
                    borderColor: '#36a2eb',
                    backgroundColor: "#36a2eb"
                }]
            },
            options: {
                maintainAspectRatio: false,
                scales: {
                    y: {
                        beginAtZero: true
                    },
                    myScale: {
                        suggestedMax: 100,
                        position: 'right'
                    }
                },
                plugins: {
                    legend: {
                        onClick: (e, legendItem, legend) => {
                            const defaultAction = Chart.defaults.plugins.legend.onClick;
                            defaultAction(e, legendItem, legend);
                            checkGraphLegend();
                        },
                    }
                }
            },
            plugins: [percentageDifferencePlugin]
        });
    }

    function save_income(){
        fetch("save_income?" + new URLSearchParams({
            "obs": document.getElementsByClassName("obs")[0].value,
            "category_id": document.getElementsByClassName("category")[0].value,
            "value": document.getElementsByClassName("money_value")[0].value,
            "date": document.getElementsByClassName("date")[0].value}),
        {
            method: "POST"
        })
        .then((response) => {
            if(response.status != 200){
                Swal.fire({
                    position: 'top-end',
                    icon: 'error',
                    title: 'Erro ao salvar receita',
                    showConfirmButton: false,
                    timer: 2500,
                    toast: true
                })
            } else {
                document.getElementsByClassName("obs")[0].value = ""
                document.getElementsByClassName("money_value")[0].value = ""
                date = new Date();
                document.getElementsByClassName("date")[0].valueAsDate = new Date(date.getFullYear(), date.getMonth(), date.getDate())
    
                Swal.fire({
                    position: 'top-end',
                    icon: 'success',
                    title: 'Receita salva com sucesso',
                    showConfirmButton: false,
                    timer: 2000,
                    toast: true
                  })
                document.getElementsByClassName("incomes").innerHTML = ''
                search_incomes()
                setTimeout(() => {
                    document.getElementsByClassName("money_value")[0].focus();
                }, 200);

                return response.text()
            }
        })
        .catch((error) => {
            console.warn(error);
        });
    }

    function fill_incomes(json){
        document.getElementsByClassName("incomes")[0].innerHTML = ''
        document.getElementsByClassName("incomes")[0].insertAdjacentHTML("beforeend",
            `
                <div class="col-6 col-sm-5 text-center">
                    Valor
                </div>
                <div class="col-sm-2 d-none d-sm-block text-center">
                    Obs
                </div>
                <div class="col-sm-2 d-none d-sm-block text-center">
                    Categoria
                </div>
                <div class="col-4 col-sm-2 text-center">
                    Data
                </div>
                <div class="col-2 col-sm-1"></div>
            `
            )
            let total = 0
            let lastDate = ""
            json.forEach(e => {
                total += e.value
                document.getElementsByClassName("incomes")[0].insertAdjacentHTML(
                    "beforeend",
                    `
                        <div class="col-6 col-sm-5 text-center ${e.date != lastDate ? "border-top-grey" : ""}" expense="${e.id}">
                            <span class="valor" expense="${e.id}" value="${e.value.toFixed(2)}" contenteditable="true">${e.value.toFixed(2)}</span>
                        </div>
                        <div class="col-sm-2 d-none d-sm-block text-center ${e.date != lastDate ? "border-top-grey" : ""}">
                            ${e.obs.length == 0 ? "-" : e.obs} 
                        </div>
                        <div class="col-sm-2 d-none d-sm-block text-center ${e.date != lastDate ? "border-top-grey" : ""}">
                            ${e.category == "" ? "-" : e.category} 
                        </div>
                        <div class="col-4 col-sm-2 text-center ${e.date != lastDate ? "border-top-grey" : ""}">
                             ${e.date != lastDate ? new Date(e.date+"T00:00").toLocaleString().substr(0,10) : ""}
                        </div>
                        <div class="col-2 col-sm-1 text-center ${e.date != lastDate ? "border-top-grey" : ""}">
                            <!--<button class="btn btn-sm btn-outline-danger py-0" onclick="delete_expense(${e.id})">
                                <span><i class="ti ti-x"></i></span>
                            </button>-->
                            <button class="btn btn-sm btn-light py-0" onclick="open_edit_income(${e.id})" data-bs-toggle="modal" data-bs-target="#exampleModal">
                                <span><i class="ti ti-pencil"></i></span>
                            </button>
                        </div>
                    `
                )
    
                lastDate = e.date
            })
            document.getElementsByClassName("incomes")[0].insertAdjacentHTML("afterbegin",
            `
                <div class="col-3"></div>
                <div class="col-3"></div>
                <div class="col-3"></div>
                <div class="col-2 text-center">
                    Total ${total.toFixed(2)}
                </div>
                <div class="col-1"></div>
            `
            )
    
            /*$('.name').on('blur', function(e){
                if(e.target.textContent.trim() != e.target.getAttribute("value")) {
                    e.target.setAttribute("value", e.target.textContent.trim()) 
                    fetch("edit_expense?" + new URLSearchParams({
                        "name": e.target.textContent.trim(),
                        "id": e.target.getAttribute("expense")}),
                    {
                        method: "POST"
                    })
                    .then((response) => response.text())
                    .then((html) => {
                        Swal.fire({
                            position: 'top-end',
                            icon: 'success',
                            title: 'Despesa salva com sucesso',
                            showConfirmButton: false,
                            timer: 2000,
                            toast: true
                          })
                    })
                    .catch((error) => {
                        console.warn(error);
                    });
                }
            })
            $('.valor').on('blur', function(e){
                if(e.target.textContent.trim() != e.target.getAttribute("value")) {
                    e.target.setAttribute("value", e.target.textContent.trim()) 
                    fetch("edit_expense?" + new URLSearchParams({
                        "value": e.target.textContent.trim(),
                        "id": e.target.getAttribute("expense")}),
                    {
                        method: "POST"
                    })
                    .then((response) => response.text())
                    .then((html) => {
                        Swal.fire({
                            position: 'top-end',
                            icon: 'success',
                            title: 'Despesa salva com sucesso',
                            showConfirmButton: false,
                            timer: 2000,
                            toast: true
                          })
                    })
                    .catch((error) => {
                        console.warn(error);
                    });
                }
            })*/
    }

    function edit_income(id){
        fetch("edit_income?" + new URLSearchParams({
            "id": id,
            "obs": document.getElementsByClassName("editobs")[0].value,
            "value": document.getElementsByClassName("editmoney_value")[0].value,
            "category_id": document.getElementsByClassName("editcategory")[0].value,
            "date": document.getElementsByClassName("editdate")[0].value}),
        {
            method: "POST"
        })
        .then((response) => response.text())
        .then(() => {
            search_incomes()
            Swal.fire({
                position: 'top-end',
                icon: 'success',
                title: 'Despesa alterada com sucesso',
                showConfirmButton: false,
                timer: 2000,
                toast: true
            })
        })
        .catch((error) => {
            console.warn(error);
        });
    }

    function delete_income(id){
        fetch("delete_income?" + new URLSearchParams({
            "id": id}), {method: "POST", redirect: 'follow'
        }).then((response) => {
            if (response.redirected) window.location.href = response.url;
            return
        })
        .then(() => {
            search_incomes()
            Swal.fire({
                position: 'top-end',
                icon: 'success',
                title: 'Despesa deletada com sucesso',
                showConfirmButton: false,
                timer: 2000,
                toast: true
            })
        })
        .catch((error) => {
            console.warn(error);
        });
    }

    function open_edit_income(id){
        var exampleModal = document.getElementById('exampleModal')
        var modalTitle = exampleModal.querySelector('.modal-title')
    
        modalTitle.textContent = 'Editar despesa'
    
        $(".modal-body").load("editincome", function() {
            fetch("get_income?" + new URLSearchParams({
                "id": id
            }), {redirect: 'follow'})
            .then((response) => {
                if (response.redirected) window.location.href = response.url;
                return response.json()
            })
            .then((json) => {
                document.getElementsByClassName("editobs")[0].value = json.obs
                document.getElementsByClassName("editmoney_value")[0].value = parseFloat(json.value).toFixed(2)
                document.getElementsByClassName("editdate")[0].value = json.date
                document.getElementsByClassName("editcategory")[0].value = json.category_id
            })
            .catch((error) => {
                console.warn(error);
            });
        })

        $(".modal-footer .btn-danger").show()
        $(".modal-footer .btn-primary").show()
        
        $(".modal-footer .btn-primary")[0].setAttribute('onclick',`edit_income(${id})`)
        $(".modal-footer .btn-danger")[0].setAttribute('onclick',`delete_income(${id})`)
    }

    search_incomes()

    function toFixed(num, fixed) {
        var re = new RegExp('^-?\\d+(?:\.\\d{0,' + (fixed || -1) + '})?');
        return num.toString().match(re)[0];
    }
</script>
