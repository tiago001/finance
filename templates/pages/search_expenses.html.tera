{% extends "index" %} {% block page %}
<div class="input-group mb-3 row">
    <div class="col-12 col-sm-3 p-2">
        <select class="form-select search" aria-label="Default select example">
            <option value="date" selected>Data</option>
            <!-- <option value="category">Categoria</option> -->
        </select>
    </div>

    <div class="col-12 col-sm-6 category p-2">
        <select class="form-select category_select" aria-label="Default select example">
            <option value="Indefinido" selected>Selecione a categoria</option>
            <option value="Fun">Fun</option>
            <option value="Transport">Transport</option>
            <option value="Food">Food</option>
            <option value="Tech">Tech</option>
            <option value="Education">Education</option>
            <option value="Others">Others</option>
        </select>
    </div>

    <div class="col-12 col-sm-7 date d-flex p-2">
        <span class="input-group-text" id="basic-addon1">Inicio</span>
        <input type="date" class="form-control date1" data-provide="datepicker">
        <span class="input-group-text" id="basic-addon1">Fim</span>
        <input type="date" class="form-control date2" data-provide="datepicker">
        <button type="button" class="btn btn-primary mx-2" onclick="previous_month()"><i class="ti ti-chevron-left"></i></button>
        <button type="button" class="btn btn-primary" onclick="next_month()"><i class="ti ti-chevron-right"></i></button>
    </div>
    <!-- <div class="col-1 d-flex">
    </div> -->
    
    <div class="col-12 col-sm-2 p-2">
        <button type="button" class="btn btn-primary w-100" onclick="search_expenses()">Buscar Despesas</button>
    </div>
</div>

<div class="row">
    <div class="col-12 col-sm-12 col-md-8">
        <canvas id="graph"  style="width: 80vh;"></canvas>
    </div>
</div>

<div class="row expenses">

</div>

<script>
    var today = new Date();
    var lastDayOfMonth = new Date(today.getFullYear(), today.getMonth()+1, 0);
    var firstDayOfMonth = new Date(today.getFullYear(), today.getMonth(), 1);
    
    document.getElementsByClassName("date1")[0].valueAsDate = firstDayOfMonth
    document.getElementsByClassName("date2")[0].valueAsDate = lastDayOfMonth
    
    for (let i of document.getElementsByClassName("category")) {i.style.display = "none"}
    document.getElementsByClassName("search")[0].addEventListener("change", function(){
        if(document.getElementsByClassName("search")[0].value == "date"){
            document.getElementsByClassName("category")[0].style.display = "none"
            for (let i of document.getElementsByClassName("date")) {i.style.display = "flex"}
        } else if(document.getElementsByClassName("search")[0].value == "category"){
            document.getElementsByClassName("category")[0].style.display = "block"
            for (let i of document.getElementsByClassName("date")) {i.style.display = "none"}
        }
    });

    function search_expenses(){
        let value1
        if (document.getElementsByClassName("search")[0].value == "category"){
            value1 = document.getElementsByClassName("category_select")[0].value
        } else {
            value1 = document.getElementsByClassName("date1")[0].value
        }
    
        fetch("search_expenses?" + new URLSearchParams({
            "name": document.getElementsByClassName("search")[0].value,
            "value1": value1,
            "value2": document.getElementsByClassName("date2")[0].value
        }), {redirect: 'follow'})
        .then((response) => {
            if (response.redirected) window.location.href = response.url;
            return response.json()
        })
        .then((json) => {
            fill_expenses(json)
            show_expenses_graph(json)
        })
        .catch((error) => {
            console.warn(error);
        });
    }

    function getDaysInMonth(month, year) {
        var date = new Date(year, month, 1);
        var days = [];
        while (date.getMonth() === month) {
          days.push(new Date(date));
          date.setDate(date.getDate() + 1);
        }
        return days;
    }

    async function show_expenses_graph(json){
        if(graph){
            graph.destroy()
        }
        let ctx = document.getElementById('graph');

        let datas = []

        let endDate = document.getElementsByClassName("date2")[0].value;

        let month = new Date(endDate).getMonth()
        let year = new Date(endDate).getFullYear()

        let daysInMonth = getDaysInMonth(month, year)

        let budgetValue = null
        
        let settings = await get_settings();
        budgetValue = settings.budget;

        daysInMonth.forEach((v, pos) => {
            let dayFound = false
            for (let index = json.length-1; index >= 0; index--) {
                let e = json[index];

                if(e.date == new Date(v).toISOString().split('T')[0]){
                    dayFound = true

                    found = false
                    datas.forEach(d => {
                        if(d.date == e.date){
                            d.value = d.value + e.value
                            found = true
                        }
                    });
                
                    if(found == false){
                        datas.push({"date" : e.date, "value" : e.value, "budget": (budgetValue/daysInMonth.length*(pos+1))})
                    }
                }
                
            }

            if(!dayFound) {
                datas.push({"date" : new Date(v).toISOString().split('T')[0], "value" : 0, "budget": (budgetValue/daysInMonth.length*(pos+1))})
            }
        });

        let labels = []
        let data = []
        let total = 0
        let acumulative = []
        let budget = []
        datas.forEach(d => {
            labels.push(d.date)
            data.push(d.value.toFixed(2))
            total = total + d.value
            acumulative.push(total.toFixed(2))
            budget.push(d.budget.toFixed(2))
        })

        graph = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: labels,
            datasets: [ {
                type: 'line',
                label: 'Acumulado',
                data: acumulative,
                yAxisID: 'myScale',
                borderColor: '#ff6384',
                backgroundColor: "#ff6384"
            },{
                type: 'line',
                label: 'Budget',
                data: budget,
                yAxisID: 'myScale',
                borderColor: '#3bb000',
                backgroundColor: "#1c7a11"
            },{
            label: 'Valor',
            data: data,
            borderWidth: 1,
            borderColor: '#36a2eb',
            backgroundColor: "#36a2eb"
            }]
        },
        options: {
            scales: {
            y: {
                beginAtZero: true
            },
            myScale: {
                // type: 'logarithmic',
                position: 'right', // `axis` is determined by the position as `'y'`
            }
            }
        }
        });
    }

    function get_settings(){
        return new Promise((resolve, reject) => {
            fetch("get_settings", {redirect: 'follow'})
            .then((response) => {
                if (response.redirected) window.location.href = response.url;
                return response.json()
            })
            .then((json) => {
                resolve(json)
            });
        })
    }

    function previous_month() {
        var today = new Date(document.getElementsByClassName("date1")[0].value.split("-"));
        today.setMonth(today.getMonth() - 1)
        var lastDayOfMonth = new Date(today.getFullYear(), today.getMonth()+1, 0);
        var firstDayOfMonth = new Date(today.getFullYear(), today.getMonth(), 1);
        
        document.getElementsByClassName("date1")[0].valueAsDate = firstDayOfMonth
        document.getElementsByClassName("date2")[0].valueAsDate = lastDayOfMonth
    }
    
    function next_month(){
        var today = new Date(document.getElementsByClassName("date1")[0].value.split("-"));
        today.setMonth(today.getMonth() + 1)
        var lastDayOfMonth = new Date(today.getFullYear(), today.getMonth()+1, 0);
        var firstDayOfMonth = new Date(today.getFullYear(), today.getMonth(), 1);
        
        document.getElementsByClassName("date1")[0].valueAsDate = firstDayOfMonth
        document.getElementsByClassName("date2")[0].valueAsDate = lastDayOfMonth
    }

    function edit_expense(id){
        fetch("edit_expense?" + new URLSearchParams({
            "id": id,
            "name": document.getElementsByClassName("editnome")[0].value,
            "value": document.getElementsByClassName("editmoney_value")[0].value,
            "category": document.getElementsByClassName("editcategory")[0].value,
            "date": document.getElementsByClassName("editdate")[0].value}),
        {
            method: "POST"
        })
        .then((response) => response.text())
        .then(() => {
            search_expenses()
            Swal.fire({
                position: 'top-end',
                icon: 'success',
                title: 'Despesa alterada com sucesso',
                showConfirmButton: false,
                timer: 2000,
                toast: true
            })
        })
        .catch((error) => {
            console.warn(error);
        });
    }

    function delete_expense(id){
        fetch("delete_expense?" + new URLSearchParams({
            "id": id}), {method: "POST", redirect: 'follow'
        }).then((response) => {
            if (response.redirected) window.location.href = response.url;
            return
        })
        .then(() => {
            search_expenses()
            Swal.fire({
                position: 'top-end',
                icon: 'success',
                title: 'Despesa deletada com sucesso',
                showConfirmButton: false,
                timer: 2000,
                toast: true
            })
        })
        .catch((error) => {
            console.warn(error);
        });
    }

    search_expenses()
</script>

{% endblock page %}