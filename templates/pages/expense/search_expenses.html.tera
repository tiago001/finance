<div class="input-group mb-3 row">
    <div class="col-12 col-sm-3 col-md-2 col-lg-3 p-1 d-none">
        <select class="form-select search" aria-label="Default select example">
            {# <option value="date" selected>Data</option> #}
            <option value="category" selected>Categoria</option>
        </select>
    </div>

    <div class="col-12 col-sm-3 col-md-2 col-lg-3 category p-1">
        <select class="form-select category_select" aria-label="Default select example">
            <option value="Indefinido" selected>Todas categorias</option>
            {% for category in categories %}
                <option value="{{category.category}}">{{category.category}}</option>
            {% endfor %}
        </select>
    </div>

    <div class="col-12 col-sm-7 col-md-6 col-lg-3 date d-flex p-1">
        <span class="input-group-text d-block" id="basic-addon1">Inicio</span>
        <input type="date" class="form-control date1" data-provide="datepicker">
    </div>
    <div class="col-12 col-sm-7 col-md-6 col-lg-3 date d-flex p-1">
        <span class="input-group-text" id="basic-addon1">Fim</span>
        <input type="date" class="form-control date2" data-provide="datepicker">
    </div>
    <div class="col-md-7 d-none d-md-block d-lg-none"></div>
    <div class="col-3 col-sm-7 col-md-2 col-lg-1 date p-1 row">
        <div class="col-6 p-0">
            <button type="button" class="btn btn-primary w-100 px-0 rounded-0 rounded-start" onclick="previous_month()"><i class="ti ti-chevron-left"></i></button>
        </div>
        <div class="col-6 p-0">
            <button type="button" class="btn btn-primary w-100 px-0 rounded-0 rounded-end" onclick="next_month()"><i class="ti ti-chevron-right"></i></button>
        </div>
    </div>
    <div class="col-9 col-sm-2 col-md-3 col-lg-2 p-1">
        <button type="button" class="btn btn-primary w-100" onclick="search_expenses()">Buscar Despesas</button>
    </div>    
</div>

<div class="row">
    <div class="col-12 col-sm-12 col-md-12">
        <div class="chart mb-4">
            <button class="btn btn-sm btn-primary float-end" onclick="change_graph()">Trocar gr√°fico</button>
            <canvas id="graph" ></canvas>
        </div>
    </div>
</div>

<div class="row expenses">

</div>

<script>
    var today = new Date();
    var lastDayOfMonth = new Date(today.getFullYear(), today.getMonth()+1, 0);
    var firstDayOfMonth = new Date(today.getFullYear(), today.getMonth(), 1);
    
    graphType = "total"
    
    document.getElementsByClassName("date1")[0].valueAsDate = firstDayOfMonth
    document.getElementsByClassName("date2")[0].valueAsDate = lastDayOfMonth
    
    expenses = null

    var params = new URLSearchParams(window.location.search);

    if(params.get("category") != null){
        document.getElementsByClassName("category_select")[0].value = params.get("category")
    }
    if(params.get("startdate") != null){
        document.getElementsByClassName("date1")[0].valueAsDate = new Date(params.get("startdate")+" 00:00")
    }
    if(params.get("enddate") != null){
        document.getElementsByClassName("date2")[0].valueAsDate = new Date(params.get("enddate")+" 00:00")
    }

    function search_expenses(){
        fetch("search_expenses?" + new URLSearchParams({
            "name": document.getElementsByClassName("search")[0].value,
            "value1": document.getElementsByClassName("date1")[0].value,
            "value2": document.getElementsByClassName("date2")[0].value,
            "category": document.getElementsByClassName("category_select")[0].value
        }), {redirect: 'follow'})
        .then((response) => {
            if (response.redirected) window.location.href = response.url;
            return response.json()
        })
        .then((json) => {
            expenses = json
            fill_expenses(json)
            if(graphType == "total"){
                show_expenses_graph()
            } else {
                show_expenses_graph_category()
            }
        })
        .catch((error) => {
            console.warn(error);
        });
    }

    function getDaysInMonth(month, year) {
        var date = new Date(year, month, 1);
        var days = [];
        while (date.getMonth() === month) {
          days.push(new Date(date));
          date.setDate(date.getDate() + 1);
        }
        return days;
    }

    async function show_expenses_graph(){
        let json = expenses

        if(graph){
            graph.destroy()
        }
        let ctx = document.getElementById('graph');

        let datas = []

        let endDate = document.getElementsByClassName("date2")[0].value;

        let month = new Date(endDate).getMonth()
        let year = new Date(endDate).getFullYear()

        let daysInMonth = getDaysInMonth(month, year)

        let budgetValue = null
        
        let settings = await get_settings();
        budgetValue = settings.budget;

        daysInMonth.forEach((v, pos) => {
            let dayFound = false
            for (let index = json.length-1; index >= 0; index--) {
                let e = json[index];

                if(e.date == new Date(v).toISOString().split('T')[0]){
                    dayFound = true

                    found = false
                    datas.forEach(d => {
                        if(d.date == e.date){
                            d.value = d.value + e.value
                            found = true
                        }
                    });
                
                    if(found == false){
                        datas.push({"date" : e.date, "value" : e.value, "budget": (budgetValue/daysInMonth.length*(pos+1))})
                    }
                }
                
            }

            if(!dayFound) {
                datas.push({"date" : new Date(v).toISOString().split('T')[0], "value" : 0, "budget": (budgetValue/daysInMonth.length*(pos+1))})
            }
        });

        let labels = []
        let data = []
        let total = 0
        let acumulative = []
        let budget = []
        datas.forEach(d => {
            labels.push(d.date)
            data.push(d.value.toFixed(2))
            total = total + d.value
            acumulative.push(total.toFixed(2))
            budget.push(d.budget.toFixed(2))
        })

        graph = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: labels,
                datasets: [ {
                    type: 'line',
                    label: 'Acumulado',
                    data: acumulative,
                    yAxisID: 'myScale',
                    borderColor: '#ff6384',
                    backgroundColor: "#ff6384"
                },{
                    type: 'line',
                    label: 'Budget',
                    data: budget,
                    yAxisID: 'myScale',
                    borderColor: '#3bb000',
                    backgroundColor: "#1c7a11"
                },{
                label: 'Valor',
                data: data,
                borderWidth: 1,
                borderColor: '#36a2eb',
                backgroundColor: "#36a2eb"
                }]
            },
            options: {
                interaction: {
                    intersect: false,
                    mode: 'index'
                },
                maintainAspectRatio: false,
                scales: {
                    y: {
                        beginAtZero: true
                    },
                    myScale: {
                        // type: 'logarithmic',
                        position: 'right', // `axis` is determined by the position as `'y'`
                    }
                }
            }
        });
    }

    async function show_expenses_graph_category(){
        let json = expenses

        if(graph){
            graph.destroy()
        }
        let ctx = document.getElementById('graph');

        let datas = []
        let datasCategory = []

        let endDate = document.getElementsByClassName("date2")[0].value;

        let month = new Date(endDate).getMonth()
        let year = new Date(endDate).getFullYear()

        let daysInMonth = getDaysInMonth(month, year)

        let budgetValue = null
        
        let settings = await get_settings();
        budgetValue = settings.budget;

        categories = []

        jsonCategories = json.map(item => item.category)
            .filter((value, index, self) => self.indexOf(value) === index)

        jsonCategories.forEach(e => {
            categories.push({name: e, data: []});
        })

        defaultCategories = [
            {name:"Education", data: [], color: "#e60049"},
            {name:"Food", data: [], color: "#0bb4ff"},
            {name:"Fun", data: [], color: "#50e991"},
            {name:"Indefinido", data: [], color: "#e6d800"},
            {name:"Mercado", data: [], color: "#00bfa0"},
            {name:"Others", data: [], color: "#ffa300"},
            {name:"Tech", data: [], color: "#dc0ab4"},
            {name:"Transport", data: [], color: "#b3d4ff"},
        ]

        defaultCategories.forEach(e => {
            if(!jsonCategories.includes(e.name)){
                categories.push(e)
            }
        });

        categories.forEach(c => {
            daysInMonth.forEach((v, pos) => {
                let dayFound = false
                let value = 0
                for (let index = json.length-1; index >= 0; index--) {
                    let e = json[index];
                    
                    if(e.date == new Date(v).toISOString().split('T')[0] && e.category == c.name){
                        value = value + e.value
                    }
                }
    
                c.data.push(value)
            });
        })

        let labels = []
        let data = []
        let total = 0
        let acumulative = []
        let budget = []

        categories.forEach(c => {
            data.push({
                label: c.name,
                data: c.data,
                borderColor: c.color != null ? '#36a2eb' : null,
                backgroundColor: c.color
            })
        })

        daysInMonth.forEach((v, pos) => {
            let dayFound = false
            for (let index = json.length-1; index >= 0; index--) {
                let e = json[index];

                if(e.date == new Date(v).toISOString().split('T')[0]){
                    dayFound = true

                    found = false
                    datas.forEach(d => {
                        if(d.date == e.date){
                            d.value = d.value + e.value
                            found = true
                        }
                    });
                
                    if(found == false){
                        datas.push({"date" : e.date, "value" : e.value, "budget": (budgetValue/daysInMonth.length*(pos+1))})
                    }
                }
                
            }

            if(!dayFound) {
                datas.push({"date" : new Date(v).toISOString().split('T')[0], "value" : 0, "budget": (budgetValue/daysInMonth.length*(pos+1))})
            }
        });

        datas.forEach(d => {
            labels.push(d.date)
            total = total + d.value
            acumulative.push(total.toFixed(2))
            budget.push(d.budget.toFixed(2))
        })

        let dataset = []
        dataset.push({
            type: 'line',
            label: 'Acumulado',
            data: acumulative,
            yAxisID: 'myScale',
            borderColor: '#ff6384',
            backgroundColor: "#ff6384"
        })
        dataset.push({
            type: 'line',
            label: 'Budget',
            data: budget,
            yAxisID: 'myScale',
            borderColor: '#3bb000',
            backgroundColor: "#1c7a11"
        })
        data.forEach(d => {
            if(d.data.filter((num) => num > 0).length > 0){
                dataset.push(d)
            }
        })

        const autocolors = window['chartjs-plugin-autocolors'];

        graph = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: labels,
                datasets: dataset
            },
            plugins: [
                autocolors
            ],
            options: {
                interaction: {
                    intersect: false,
                    mode: 'index'
                },
                maintainAspectRatio: false,
                scales: {
                    y: {
                        stacked: true,
                        beginAtZero: true
                    },
                    x: {
                        stacked: true
                    },
                    myScale: {
                        // type: 'logarithmic',
                        position: 'right', // `axis` is determined by the position as `'y'`
                    }
                },
                plugins: {
                    tooltip: {
                        filter: (tooltipItem) => tooltipItem.raw > 0,
                        /*itemSort: function(a, b) {
                            console.log(b.dataset.label)
                            return b.raw - a.raw || b.dataset.label == "Budget";
                        }*/
                    }, 
                }
            }
        });
    }


    function change_graph(){
        if(graphType == "total"){
            graphType = "category"
            show_expenses_graph_category()
        } else {
            graphType = "total"
            show_expenses_graph()
        }
    }

    function get_settings(){
        return new Promise((resolve, reject) => {
            fetch("get_settings", {redirect: 'follow'})
            .then((response) => {
                if (response.redirected) window.location.href = response.url;
                return response.json()
            })
            .then((json) => {
                resolve(json)
            });
        })
    }

    function previous_month() {
        var today = new Date(document.getElementsByClassName("date1")[0].value.split("-"));
        today.setMonth(today.getMonth() - 1)
        var lastDayOfMonth = new Date(today.getFullYear(), today.getMonth()+1, 0);
        var firstDayOfMonth = new Date(today.getFullYear(), today.getMonth(), 1);
        
        document.getElementsByClassName("date1")[0].valueAsDate = firstDayOfMonth
        document.getElementsByClassName("date2")[0].valueAsDate = lastDayOfMonth
    }
    
    function next_month(){
        var today = new Date(document.getElementsByClassName("date1")[0].value.split("-"));
        today.setMonth(today.getMonth() + 1)
        var lastDayOfMonth = new Date(today.getFullYear(), today.getMonth()+1, 0);
        var firstDayOfMonth = new Date(today.getFullYear(), today.getMonth(), 1);
        
        document.getElementsByClassName("date1")[0].valueAsDate = firstDayOfMonth
        document.getElementsByClassName("date2")[0].valueAsDate = lastDayOfMonth
    }

    function edit_expense(id){
        fetch("edit_expense?" + new URLSearchParams({
            "id": id,
            "name": document.getElementsByClassName("editnome")[0].value,
            "value": document.getElementsByClassName("editmoney_value")[0].value,
            "category_id": document.getElementsByClassName("editcategory")[0].value,
            "date": document.getElementsByClassName("editdate")[0].value}),
        {
            method: "POST"
        })
        .then((response) => response.text())
        .then(() => {
            search_expenses()
            Swal.fire({
                position: 'top-end',
                icon: 'success',
                title: 'Despesa alterada com sucesso',
                showConfirmButton: false,
                timer: 2000,
                toast: true
            })
        })
        .catch((error) => {
            console.warn(error);
        });
    }

    function fill_expenses(json){
        document.getElementsByClassName("expenses")[0].innerHTML = ''
        document.getElementsByClassName("expenses")[0].insertAdjacentHTML("beforeend",
            `
                <div class="col-3 d-none d-sm-block">
                    Nome
                </div>
                <div class="col-3 d-none d-sm-block text-center">
                    Valor
                </div>
                <div class="col-3 d-none d-sm-block text-center">
                    Categoria
                </div>
                <div class="col-2 d-none d-sm-block text-center">
                    Data
                </div>
                <div class="col-1 d-none d-sm-block"></div>
            `
        )
        document.getElementsByClassName("expenses")[0].insertAdjacentHTML("beforeend", `<div class="row future-expenses p-0" style="background-color: #eeeeee;border-radius: 5px;"></div>`);
        
        let total = 0
        let lastDate = ""

        json.forEach(e => {
            total += e.value

            tagExpense = "expenses"
            if(new Date(e.date+" 00:00") > new Date()) {
                tagExpense = "future-expenses"
            }

            if(e.date != lastDate){
                document.getElementsByClassName(tagExpense)[0].insertAdjacentHTML(
                    "beforeend",
                    `<div class="col-11 mt-2 text-center d-block d-sm-none">
                            <i class="ti ti-calendar"></i> ${new Date(e.date+"T00:00").toLocaleString().substr(0,10)}
                        </div>`)
                document.getElementsByClassName(tagExpense)[0].insertAdjacentHTML("beforeend",
                    `
                        <div class="col-4 col-sm-3 d-block d-sm-none">
                            Nome
                        </div>
                        <div class="col-3 col-sm-3 d-block d-sm-none text-center">
                            Valor
                        </div>
                        <div class="col-4 col-sm-3 d-block d-sm-none text-center">
                            Categoria
                        </div>
                        <div class="col-1 d-block d-sm-none"></div>
                    `)
            }


            document.getElementsByClassName(tagExpense)[0].insertAdjacentHTML(
                "beforeend",
                `
                    <div class="col-4 col-sm-3 text-truncate" expense="${e.id}" value=${e.name} ${e.date != lastDate ? "style=\"border-top: 2px solid #e1e1e1;\"" : ""}>
                        <span class="name" expense="${e.id}" value=${e.name} contenteditable="true">${e.name}</span> 
                    </div>
                    <div class="col-3 col-sm-3 text-center" expense="${e.id}" ${e.date != lastDate ? "style=\"border-top: 2px solid #e1e1e1;\"" : ""}>
                        <span class="valor" expense="${e.id}" value="${e.value.toFixed(2)}" contenteditable="true">${e.value.toFixed(2)}</span>
                    </div>
                    <div class="col-4 col-sm-3 text-center text-truncate" ${e.date != lastDate ? "style=\"border-top: 2px solid #e1e1e1;\"" : ""}>
                        ${e.category} 
                    </div>
                    <div class="col-12 col-sm-2 text-center d-none d-sm-block" ${e.date != lastDate ? "style=\"border-top: 2px solid #e1e1e1;\"" : ""}>
                        ${e.date != lastDate ? new Date(e.date+"T00:00").toLocaleString().substr(0,10) : ""}
                    </div>
                    <div class="col-1 text-center p-0" ${e.date != lastDate ? "style=\"border-top: 2px solid #e1e1e1;\"" : ""}>
                        <button class="btn btn-sm btn-light py-0" onclick="open_edit_expense(${e.id})" data-bs-toggle="modal" data-bs-target="#exampleModal">
                            <span><i class="ti ti-pencil"></i></span>
                        </button>
                    </div>
                `
            )

            lastDate = e.date
        })

        if(document.getElementsByClassName("future-expenses ")[0].childNodes.length > 0){
            document.getElementsByClassName("future-expenses")[0].insertAdjacentHTML("beforeend", 
            `<div class="col-12 text-center" style="border-top: 2px solid #e1e1e1;">
                Despesas futuras 
                <i class="ti ti-arrow-narrow-up"></i>
            </div>`
            );
        }

        document.getElementsByClassName("expenses")[0].insertAdjacentHTML("afterbegin",
        `
            <div class="col-6"></div>
            <div class="col-1 col-sm-3"></div>
            <div class="col-5 col-sm-2 text-center">
                Total ${total.toFixed(2)}
            </div>
            <div class="col-1 d-none d-sm-block"></div>
        `
        )
    
        $('.name').on('blur', function(e){
            if(e.target.textContent.trim() != e.target.getAttribute("value")) {
                e.target.setAttribute("value", e.target.textContent.trim()) 
                fetch("edit_expense?" + new URLSearchParams({
                    "name": e.target.textContent.trim(),
                    "id": e.target.getAttribute("expense")}),
                {
                    method: "POST"
                })
                .then((response) => response.text())
                .then((html) => {
                    Swal.fire({
                        position: 'top-end',
                        icon: 'success',
                        title: 'Despesa salva com sucesso',
                        showConfirmButton: false,
                        timer: 2000,
                        toast: true
                        })
                })
                .catch((error) => {
                    console.warn(error);
                });
            }
        })
        $('.valor').on('blur', function(e){
            if(e.target.textContent.trim() != e.target.getAttribute("value")) {
                e.target.setAttribute("value", e.target.textContent.trim()) 
                fetch("edit_expense?" + new URLSearchParams({
                    "value": e.target.textContent.trim(),
                    "id": e.target.getAttribute("expense")}),
                {
                    method: "POST"
                })
                .then((response) => response.text())
                .then((html) => {
                    Swal.fire({
                        position: 'top-end',
                        icon: 'success',
                        title: 'Despesa salva com sucesso',
                        showConfirmButton: false,
                        timer: 2000,
                        toast: true
                        })
                })
                .catch((error) => {
                    console.warn(error);
                });
            }
        })
    }

    search_expenses()
</script>